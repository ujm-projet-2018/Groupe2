import java.awt.Desktop;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.ProcessBuilder.Redirect;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.nio.file.*;
import java.util.Arrays;

/************************************************************************************************************/

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hp
 */
public class Swing extends javax.swing.JFrame {

    /**
     * Creates new form Swing
     */
    public Swing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Wav vers fichier intermediaire");

        jButton2.setText("Midi vers fichier intermediaire");

        jButton3.setText("fichier intermediaire vers ly");
        
        jButton4.setText("ly vers pdf");
        
        jButton5.setText("ouvrir pdf");
        
        jButton6.setText("Wav vers pdf");
        
        jButton7.setText("Midi vers pdf");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGap(0, 211, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(0, 269, Short.MAX_VALUE))
        );
        
        
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JFileChooser fileChooser = new JFileChooser();
                try {
					fileChooser.setCurrentDirectory(new File(new File(".").getCanonicalPath()));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                int result = fileChooser.showDialog(null, "selectionner");
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String fichier = selectedFile.getPath();
                    System.out.println(selectedFile);
                    try {
						ProcessBuilder process = new ProcessBuilder("./detection_notes","-f",fichier);
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Detection/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin detection_notes");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                }
            }
        });
        
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JFileChooser fileChooser = new JFileChooser();
                try {
					fileChooser.setCurrentDirectory(new File(new File(".").getCanonicalPath()));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                int result = fileChooser.showDialog(null, "selectionner");
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String fichier = selectedFile.getName();
                    fichier = "mid/"+fichier;
                    System.out.println(selectedFile);
                    try {
						ProcessBuilder process = new ProcessBuilder("java","ParserMidi",fichier);
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("."));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin ParserMidi");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                }
            }
        });
        
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JFileChooser fileChooser = new JFileChooser();
                try {
					fileChooser.setCurrentDirectory(new File(new File(".").getCanonicalPath()));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                int result = fileChooser.showDialog(null, "selectionner");
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String fichier = selectedFile.getPath();
                    System.out.println(selectedFile);
                    try {
						ProcessBuilder process = new ProcessBuilder("./createSheet",fichier);
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Lilypond/code/bin/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin createSheet");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                }
            }
        });
        
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JFileChooser fileChooser = new JFileChooser();
                try {
					fileChooser.setCurrentDirectory(new File(new File(".").getCanonicalPath()));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                int result = fileChooser.showDialog(null, "selectionner");
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String fichier = selectedFile.getPath();
                    System.out.println(selectedFile);
                    try {
						ProcessBuilder process = new ProcessBuilder("lilypond",fichier);
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Lilypond/code/bin/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin lilypond");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                }
            }
        });
        
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JFileChooser fileChooser = new JFileChooser();
                try {
					fileChooser.setCurrentDirectory(new File(new File(".").getCanonicalPath()));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                int result = fileChooser.showDialog(null, "selectionner");
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    System.out.println(selectedFile);
                    try {
                    	Desktop.getDesktop().open(selectedFile);
                    	
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
                }
            }
        });
        
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JFileChooser fileChooser = new JFileChooser();
                try {
					fileChooser.setCurrentDirectory(new File(new File(".").getCanonicalPath()));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                int result = fileChooser.showDialog(null, "selectionner");
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String fichier = selectedFile.getPath();
                    System.out.println(selectedFile);
                    try {
			ProcessBuilder process = new ProcessBuilder("./detection_notes","-f",fichier);
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Detection/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin detection_notes");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                    
                    try {
						ProcessBuilder process = new ProcessBuilder("./createSheet","../../../Detection/notes.txt");
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Lilypond/code/bin/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin createSheet");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                    
                    try {
						ProcessBuilder process = new ProcessBuilder("lilypond","partition.ly");
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Lilypond/code/bin/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin lilypond");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                    
                    try {
                    	File pdf = new File("../Lilypond/code/bin/partition.pdf");
                    	Desktop.getDesktop().open(pdf);
                    	
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
                    
                }
            }
        });
        
        
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	JFileChooser fileChooser = new JFileChooser();
                try {
					fileChooser.setCurrentDirectory(new File(new File(".").getCanonicalPath()));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                int result = fileChooser.showDialog(null, "selectionner");
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String fichier = selectedFile.getPath();
                    System.out.println(selectedFile);
                    try {
						ProcessBuilder process = new ProcessBuilder("java","ParserMidi",fichier);
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("."));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin detection_notes");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                    
                    try {
						ProcessBuilder process = new ProcessBuilder("./createSheet","../../../ParserMidi/notes.txt");
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Lilypond/code/bin/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin createSheet");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                    
                    try {
						ProcessBuilder process = new ProcessBuilder("lilypond","partition.ly");
						
						process.redirectOutput(Redirect.PIPE);
						process.directory(new File("../Lilypond/code/bin/"));
						Process processstart = process.start();
						processstart.waitFor();// Wait to finish application execution.
						System.out.println("fin lilypond");
							
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                    
                    try {
                    	File pdf = new File("../Lilypond/code/bin/partition.pdf");
                    	Desktop.getDesktop().open(pdf);
                    	
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
                    
                }
            }
        });
        
        
        

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Swing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Swing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    // End of variables declaration//GEN-END:variables
}
